import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { CardContent } from '../ui/Card';
import Button from '../ui/Button';
import { FileText, Image, BarChart2, ArrowRight, ArrowLeft } from 'lucide-react';
import { useLanguage } from '../../contexts/LanguageContext';
import TelegramPostPreview from '../ui/TelegramPostPreview';

// Post type definitions
type PostType = 'text' | 'image' | 'video' | 'media-group';

interface PostTypeOption {
  id: PostType;
  title: string;
  description: string;
  icon: React.ReactNode;
  example: {
    text: string;
    imageUrl?: string;
    imageUrls?: string[];
    tags?: string[];
  };
}

const PostTypeSelector: React.FC = () => {
  const { t } = useLanguage();
  const navigate = useNavigate();
  const [selectedType, setSelectedType] = useState<PostType>('text');

  const postTypes: PostTypeOption[] = [
    {
      id: 'text',
      title: t('post_type.text_title') || '–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç',
      description: t('post_type.text_description') || '–û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
      icon: <FileText size={24} />,
      example: {
        text: t('post_type.text_example') || 'üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç!\n\n–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n\n‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n‚úÖ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n\n',
        tags: [t('post_type.text_example_tags') || '#new #content #telegram']
      }
    },
    {
      id: 'image',
      title: t('post_type.image_title') || '–ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      description: t('post_type.image_description') || '–¢–µ–∫—Å—Ç —Å –æ–¥–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      icon: <Image size={24} />,
      example: {
        text: t('post_type.image_example') || 'üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞\n\n–°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è.\n\n',
        imageUrl: 'https://images.unsplash.com/photo-1511795409834-ef04bbd61622?w=300&h=200&fit=crop',
        tags: [t('post_type.image_example_tags') || '#design #creative #branding']
      }
    },
    {
      id: 'media-group',
      title: t('post_type.media_group_title') || '–ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞',
      description: t('post_type.media_group_description') || '–ù–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø–æ—Å—Ç–µ',
      icon: <BarChart2 size={24} />,
      example: {
        text: t('post_type.media_group_example') || 'üì∏ –§–æ—Ç–æ–æ—Ç—á–µ—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n–î–µ–ª–∏–º—Å—è —è—Ä–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ —Å –Ω–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è. –ë—ã–ª–æ –∑–¥–æ—Ä–æ–≤–æ!\n\nüë• 200+ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\nüéØ 10 –¥–æ–∫–ª–∞–¥–æ–≤\n‚≠ê –û—Ç–ª–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã\n\n',
        imageUrls: [
          'https://images.unsplash.com/photo-1511795409834-ef04bbd61622?w=300&h=200&fit=crop',
          'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=300&h=200&fit=crop',
          'https://images.unsplash.com/photo-1517048676732-d65bc937f952?w=300&h=200&fit=crop'
        ],
        tags: [t('post_type.media_group_example_tags') || '#event #photo #team']
      }
    }
  ];

  const selectedPostType = postTypes.find(type => type.id === selectedType)!;

  const handleContinue = () => {
    navigate(`/dashboard/content/create-${selectedType}`);
  };

  const handleBack = () => {
    navigate('/dashboard');
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between space-x-4 mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            {t('post_type.title') || '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞'}
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            {t('post_type.subtitle') || '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'}
          </p>
        </div>
        <Button 
          variant="outline" 
          size="sm"
          onClick={handleBack}
          leftIcon={<ArrowLeft size={16} />}
        >
          {t('common.back') || '–ù–∞–∑–∞–¥'}
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Post Types Selection */}
        <div>
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            {t('post_type.types_title') || '–¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤'}
          </h2>
          <div className="space-y-3">
            {postTypes.map((type) => (
              <div
                key={type.id}
                className={`cursor-pointer transition-all duration-200 border rounded-lg ${
                  selectedType === type.id
                    ? 'ring-2 ring-blue-500 border-blue-200 dark:border-blue-800 bg-white dark:bg-gray-800'
                    : 'hover:shadow-md border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800'
                }`}
                onClick={() => setSelectedType(type.id)}
              >
                <CardContent className="p-4">
                  <div className="flex items-start space-x-4">
                    <div className={`p-2 rounded-lg ${
                      selectedType === type.id
                        ? 'bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-400'
                        : 'bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400'
                    }`}>
                      {type.icon}
                    </div>
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900 dark:text-white mb-1">
                        {type.title}
                      </h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {type.description}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </div>
            ))}
          </div>
        </div>

        {/* Preview */}
        <div>
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            {t('post_type.preview_title') || '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä'}
          </h2>
          <div className="sticky top-6">
            <TelegramPostPreview
              text={selectedPostType.example.text}
              imageUrl={selectedPostType.example.imageUrl}
              imageUrls={selectedPostType.example.imageUrls}
              tags={selectedPostType.example.tags}
              imagePosition={selectedPostType.id === 'image' ? 'bottom' : 'top'}
            />
          </div>
        </div>
      </div>

      {/* Continue Button */}
      <div className="flex justify-end pt-6 border-t border-gray-200 dark:border-gray-700">
        <Button
          onClick={handleContinue}
          size="lg"
          rightIcon={<ArrowRight size={20} />}
          className="px-8"
        >
          {t('post_type.continue') || '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞'}
        </Button>
      </div>
    </div>
  );
};

export default PostTypeSelector; 